# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:1.65"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: https://docs.gitlab.com/ee/ci/services/index.html
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
before_script:
   - apt-get update -yqq
   - apt-get install -yqq --no-install-recommends build-essential
   - apt-get install -yqq cmake
   - apt-get install -yqq libcunit1 libcunit1-dev
   - apt-get install -yqq libclang-13-dev
   - apt-get install -yqq python3

# Use cargo to test the project
test:track_elements:
  script:
    - cd track_element/
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --verbose
    - cd ..
test:code_generation:
  script:
    - echo Generating interlocking code ...
    - cargo run --package code_generation -- -e -o ixl cli
    - cd ixl
    - cargo test
    - cd ..

# Optional: Use a third party library to generate gitlab junit reports
# test:junit-report:
#   script:
#     Should be specified in Cargo.toml
#     - cargo install junitify
#     - cargo test -- --format=json -Z unstable-options --report-time | junitify --out $CI_PROJECT_DIR/tests/
#   artifacts:
#     when: always
#     reports:
#       junit: $CI_PROJECT_DIR/tests/*.xml

deploy:
  only:
  - main
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
